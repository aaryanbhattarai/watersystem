Inventory Demand Forecasting System
=====================================

A final year project for 7th Semester CSIT (3 Credit Hours)

Description
-----------
This is a web-based application designed to assist business owners in predicting
future inventory requirements for non-seasonal products using historical sales data.
It leverages machine learning algorithms (Linear Regression and Random Forest Regressor)
to provide accurate demand forecasts, helping businesses optimize stock levels.

Technologies Used
-----------------
- Frontend: HTML, CSS, JavaScript (including Chart.js)
- Backend: PHP
- Database: MySQL (via XAMPP)
- Machine Learning: Python (Pandas, NumPy, Scikit-learn, Joblib)
- Server Environment: XAMPP (Apache, MySQL)

Project Structure
-----------------
inventory/
├── index.php                 # Landing/Login page
├── register.php              # User registration
├── login.php                 # User login
├── logout.php                # User logout
├── dashboard.php             # Main user dashboard
├── upload_data.php           # Page to upload user CSV data
├── process_upload.php        # Handles file upload and triggers Python script
├── train_model.py            # Script to train ML models (uses training.csv)
├── forecast.py               # Script to generate forecasts (uses user_upload.csv)
├── model.pkl                 # Serialized trained ML models (generated by train_model.py)
├── training.csv              # Historical data for training models (Provided)
├── user_upload.csv           # User's recent data for forecasting (Uploaded by user)
├── forecast_result.json      # Forecast results output by forecast.py
├── results.php               # Displays forecast results and charts
├── chart.js                  # JavaScript for rendering charts
├── form-validation.js        # Client-side form validation
├── styles.css                # Main stylesheet
├── config.php                # Database configuration
├── functions.php             # Reusable PHP functions
└── README.txt                # This file

Database Schema (in MySQL/inventory_db)
---------------------------------------
1. users: Stores user account information.
2. uploads: Logs user CSV file uploads.
3. forecasts: Stores generated forecast results and model metrics.

Setup Instructions
------------------
1.  Prerequisites:
    - Install XAMPP (https://www.apachefriends.org/index.html).
    - Install Python (https://www.python.org/downloads/).
    - Install required Python libraries:
      `pip install pandas numpy scikit-learn joblib`

2.  Configure XAMPP:
    - Start Apache and MySQL services in the XAMPP Control Panel.
    - Access phpMyAdmin (usually http://localhost/phpmyadmin).
    - Create a new database named `inventory_db`.
    - Execute the SQL commands provided in the project documentation to 
    create the `users`, `uploads`, and `forecasts` tables.

3.  Deploy Project Files:
    - Place the entire `inventory` folder inside your XAMPP `htdocs` directory 
    (e.g., `C:\xampp\htdocs\inventory`).

4.  Configure Database Connection:
    - Open `config.php`.
    - Verify the database connection settings (DB_HOST, DB_USER, DB_PASS, DB_NAME)
     match your XAMPP MySQL configuration (defaults are usually fine for local development).

5.  Train the Models:
    - Navigate to your project directory in the terminal/command prompt.
    - Run the training script: `python train_model.py`
    - This will create `linear_regression_model.pkl`, `random_forest_model.pkl`, 
    `le_category.pkl`, and `le_promotion.pkl`.

6.  Access the Application:
    - Open your web browser.
    - Go to `http://localhost/inventory`.

Usage Workflow
--------------
1.  Register a new account or log in with existing credentials.
2.  Navigate to the "Upload Data" section.
3.  Upload your `user_upload.csv` file containing the most recent month's sales data.
4.  The system will process the data and generate forecasts using the pre-trained models.
5.  View the forecast results, including predicted demand and model performance metrics (MAE, RMSE, R²),
 on the "View Results" page. Charts will visualize the comparison between Linear Regression and Random 
 Forest predictions.

Important Notes
---------------
- Ensure `training.csv` is present in the project directory for initial model training.
- The `user_upload.csv` file is overwritten each time a user uploads new data.
- Model performance metrics (MAE, RMSE, R²) shown are calculated by comparing the model's prediction
 on the user's *uploaded* data (`Monthly_Sales`) against the prediction itself. This indicates how the 
 model fits the new data, not the absolute accuracy of the future forecast (which requires actual future 
 sales data).
- The system uses CSV files as a data bridge between PHP and Python for simplicity and modularity.
